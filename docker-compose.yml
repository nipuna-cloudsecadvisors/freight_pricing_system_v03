services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: freight_pricing_db
    environment:
      POSTGRES_DB: freight_pricing
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/api/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - freight_network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: freight_pricing_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - freight_network

  # API Server
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: freight_pricing_api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@db:5432/freight_pricing?schema=public
      - REDIS_URL=redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      - db
      - redis
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    networks:
      - freight_network
    command: ["pnpm", "run", "start:prod"]

  # Worker for background jobs
  worker:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: freight_pricing_worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@db:5432/freight_pricing?schema=public
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    networks:
      - freight_network
    command: ["pnpm", "run", "worker:start"]

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: freight_pricing_web
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://api:3001
    ports:
      - "3000:3000"
    depends_on:
      - api
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    networks:
      - freight_network
    command: ["pnpm", "run", "start"]

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: freight_pricing_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api
    networks:
      - freight_network

volumes:
  postgres_data:
  redis_data:

networks:
  freight_network:
    driver: bridge
